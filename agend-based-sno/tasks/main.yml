# tasks file for agend-based-sno
---
# - name: "SOFTWARE: Install some necessary tools"
#   ansible.builtin.yum:
#     name:
#       - tar
#       - wget
#       - jq
#       - podman
#       - python3
#       - nmstate
#     state: present

# - name: "SOFTWARE: Install python3-pip"
#   ansible.builtin.package:
#     name: python3-pip
#     state: present

# - name: "SOFTWARE: Install pyvmomi via pip3"
#   ansible.builtin.pip:
#     name: pyvmomi
#     state: present
#     executable: pip3

# - name: "SOFTWARE: Install requests via pip3"
#   ansible.builtin.pip:
#     name: requests
#     state: present
#     executable: pip3

# Everything for a clean installation of the same cluster
- name: "CLEAN: Clean Cluster directories for a fresh installation"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ssh_key_dir }}"
    - "{{ cluster_dir }}"
    - "{{ network_dir}}"

# Remove ISO-File if exists, because of a new fresh installation
- name: "CLEAN: Delete the iso-file"
  ansible.builtin.file:
    path: "{{ dir_downloads }}{{ cluster_name }}.iso"
    state: absent

- name: "ENVIRONMENT: Create some base directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0644'
  loop:
    - "{{ base_dir }}"
    - "{{ base_dir }}ssh-keys"
    - "{{ base_dir }}sno-clusters"
    # - "{{ base_dir }}downloads"     # This will be created in the Containerfile-Build
    - "{{ base_dir }}certs"
    - "{{ ssh_key_dir }}"
    - "{{ cluster_dir }}"
    - "{{ network_dir }}"
    - "/root/.cache/agent/image_cache/"

# # BEGIN Templating the network-files for ISO-Customize
# # Template lan.nmconnection.j2
# - name: "COREOS-INSTALLER: Template the ens33.nmconnection.j2"
#   ansible.builtin.template:
#     src: ens33.nmconnection.j2
#     dest: "{{ network_dir }}ens33.nmconnection"
#     mode: '0644'

- name: "ENVIRONMENT: Create SSH directory if it does not exist"
  ansible.builtin.file:
    path: "{{ ssh_key_dir }}"
    state: directory
    mode: '0755'

- name: Verify Nginx and Artifactory service availability
  uri:
    url: "https://{{ container_image_registry_root }}/ui/login/"
    method: GET
    return_content: no
    validate_certs: false
  register: artifactory_response
  failed_when: artifactory_response.status not in [200, 502, 503]

- name: Debug Artifactory service response
  debug:
    msg: "Artifactory is running. Status code: {{ artifactory_response.status }}"
  when: artifactory_response.status == 200

- name: Handle Bad Gateway (502) error
  fail:
    msg: 
      - "Artifactory returned 502 Bad Gateway."
      - "Bitte prüfe die NGINX-Konfiguration oder Artifactory-Verfügbarkeit."
      - "systemctl status nginx"
      - "systemctl status artifactory"
      - "Bitte vergiss nicht die beiden Dienste zu starten!"
  when: artifactory_response.status == 502

- name: Handle Service Unavailable (503) error
  fail:
    msg: 
      - "Artifactory returned 503 Service Unavailable."
      - "Bitte prüfe, ob dein Artifactory-Server läuft...!!!"
  when: artifactory_response.status == 503

- name: Fail if Artifactory is not running
  fail:
    msg: 
      - "Artifactory ist nicht erreichbar. Status code: {{ artifactory_response.status }}"
      - "Bitte prüfe, ob Nginx und Artifactory laufen"
  when: artifactory_response.status not in [200, 502, 503]



# - name: "DOWNLOAD: OpenShift installer (openshift-install) from Artifactory"
#   ansible.builtin.get_url:
#     url: "{{ openshift_installer_url }}"
#     dest: "{{ base_dir }}downloads/openshift-install-{{ openshift_version }}.tar.gz"
#     mode: '0644'
#     username: "{{ container_registry_username }}"
#     password: "{{ container_registry_password }}"
#     validate_certs: false

# - name: "UNARCHIVE: Check if OpenShift installer is already extracted"
#   ansible.builtin.stat:
#     path: "{{ base_dir }}downloads/openshift-install-{{ openshift_version }}"
#   register: installer_extracted

# - name: "UNARCHIVE: Extract OpenShift installer (openshift-install)"
#   ansible.builtin.unarchive:
#     src: "{{ base_dir }}downloads/openshift-install-{{ openshift_version }}.tar.gz"
#     dest: "{{ base_dir }}downloads/"
#     remote_src: true
#   when: not installer_extracted.stat.exists

# - name: "DOWNLOAD: OpenShift client (oc)"
#   ansible.builtin.get_url:
#     url: "{{ openshift_client_url }}"
#     dest: "{{ base_dir }}downloads/openshift-client-{{ openshift_version }}.tar.gz"
#     mode: '0644'
#     username: "{{ container_registry_username }}"
#     password: "{{ container_registry_password }}"
#     validate_certs: false

# - name: "UNARCHIVE: Check if OpenShift client is already extracted"
#   ansible.builtin.stat:
#     path: "{{ base_dir }}downloads/oc"
#   register: client_extracted

# - name: "UNARCHIVE: Extract OpenShift client"
#   ansible.builtin.unarchive:
#     src: "{{ base_dir }}downloads/openshift-client-{{ openshift_version }}.tar.gz"
#     dest: "{{ base_dir }}downloads/"
#     remote_src: true
#   when: not client_extracted.stat.exists

# # Copy oc, openshift-install to /usr/local/bin
# - name: "Copy and set executable permissions for OpenShift binaries"
#   ansible.builtin.copy:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     mode: '0755'
#     owner: root
#     group: root
#     remote_src: yes
#   with_items:
#     - { src: '/opt/sva/downloads/oc', dest: '/usr/local/bin/oc' }
#     - { src: '/opt/sva/downloads/openshift-install', dest: '/usr/local/bin/openshift-install' }



# - name: "ENVIRONMENT: Add OpenShift binaries to PATH"
#   ansible.builtin.lineinfile:
#     # path: /etc/profile.d/openshift_path.sh
#     path: "~/.bashrc"
#     line: 'export PATH=$PATH:{{ base_dir }}downloads'
#     create: true
#     mode: '0644'

# - name: "SOURCE: Aktivieren der PATH-Änderung"
#   # shell: "source /etc/profile.d/openshift_path.sh"
#   shell: "source ~/.bashrc"
#   args:
#     executable: /bin/bash

# Install GOVC on Bastion-Host
# wget https://github.com/vmware/govmomi/releases/download/v0.46.0/govc_Linux_x86_64.tar.gz
# tar xf govc_Linux_x86_64.tar.gz 
# mv govc /usr/local/bin/
# - name: "DOWNLOAD: GOVC-Client (govc)"
#   ansible.builtin.get_url:
#     url: "{{ govc_download_link }}"
#     dest: "{{ base_dir }}downloads/govc_Linux_x86_64.tar.gz"
#     mode: '0644'
#     username: "{{ container_registry_username }}"
#     password: "{{ container_registry_password }}"
#     validate_certs: false

# - name: "UNARCHIVE: Extract GOVC-Tar-File (govc)"
#   ansible.builtin.unarchive:
#     src: "{{ base_dir }}downloads/govc_Linux_x86_64.tar.gz"
#     dest: "{{ base_dir }}downloads/"
#     remote_src: true

# - name: "ENVIRONMENT: Source OpenShift path script"
#   ansible.builtin.shell: source /etc/profile.d/openshift_path.sh
#   args:
#     executable: /bin/bash

- name: "SSH-KEYS: Generate SSH key if not exists"
  ansible.builtin.command:
    cmd: "ssh-keygen -f {{ ssh_key_dir }}/id_rsa_{{ cluster_name }} -N ''"
  args:
    creates: "{{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub"

- name: "SSH-KEYS: Check if SSH public key exists on remote server"
  ansible.builtin.stat:
    path: "{{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub"
  register: ssh_key_stat

- name: "SSH-KEYS: Fail if SSH public key does not exist"
  ansible.builtin.fail:
    msg: "The SSH public key {{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub was not found on the remote server."
  when: not ssh_key_stat.stat.exists

- name: "SSH-KEYS: Read SSH public key from remote server"
  ansible.builtin.slurp:
    src: "{{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub"
  register: ssh_key_content
  when: ssh_key_stat.stat.exists

- name: "SSH-KEYS: Decode SSH public key content"
  ansible.builtin.set_fact:
    ssh_public_key: "{{ ssh_key_content.content | b64decode | trim }}"
  when: ssh_key_stat.stat.exists

# Template install-config.yaml
- name: "OPENSHIFT: Template install-config.yaml in cluster directory"
  ansible.builtin.template:
    src: install-config.yaml.j2
    dest: "{{ cluster_dir }}/install-config.yaml"
    mode: '0644'

- name: "OPENSHIFT: Template agent-config.yaml in cluster directory"
  ansible.builtin.template:
    src: agent-config-with-network.yaml.j2
    dest: "{{ cluster_dir }}/agent-config.yaml"
    mode: '0644'

# - name: "OPENSHIFT: Template butane.yaml in cluster directory"
#   ansible.builtin.template:
#     src: butane.conf.j2
#     dest: "{{ cluster_dir }}/butane.yaml"
#     mode: '0644'

# Backup -install-config.yaml
- name: "OPENSHIFT: Make a copy of install-config.yaml to shared directory (install-config-{{ cluster_name }}.yaml)"
  ansible.builtin.template:
    src: "install-config.yaml.j2"
    dest: "{{ base_dir }}/sno-clusters/install-config-{{ cluster_name }}.yaml"
    mode: '0644'

- name: "OPENSHIFT: Make a copy of agent-config.yaml to shared directory (install-config-{{ cluster_name }}.yaml)"
  ansible.builtin.template:
    src: "agent-config-with-network.yaml.j2"
    dest: "{{ base_dir }}/sno-clusters/agent-config-{{ cluster_name }}.yaml"
    mode: '0644'

# - name: "OPENSHIFT: Make a copy of butane.yaml to shared directory (butane-{{ cluster_name }}.yaml)"
#   ansible.builtin.template:
#     src: "butane.conf.j2"
#     dest: "{{ base_dir }}/sno-clusters/butane-{{ cluster_name }}.yaml"
#     mode: '0644'

# - name: "OPENSHIFT: Retrieve URL for rhcos-live.iso"
#   ansible.builtin.shell: "{{ base_dir }}/downloads/openshift-install coreos print-stream-json | grep location | grep {{ arch }} | grep iso | cut -d'\"' -f4"
#   register: iso_output

# - name: "OPENSHIFT: Set URL fact for rhcos-live.iso"
#   ansible.builtin.set_fact:
#     iso_url: "{{ iso_output.stdout }}"
#   when: iso_output.stdout is defined and iso_output.stdout != ""


# # Muss hier abgelegt werden. 
# # /root/.cache/agent/image_cache/coreos-x86_64.iso
# - name: "DOWNLOAD: rhcos-live.iso from Red Hat"
#   ansible.builtin.get_url:
#     url: "{{ iso_url }}"
#     dest: "{{ base_dir }}/downloads/rhcos-live.iso"   # /root/.cache/agent/image_cache/coreos-x86_64.iso
#     mode: '0644'
#   when: iso_url is defined

# - name: "DOWNLOAD: rhcos-live.iso from Artifactory to cache-directory"
#   ansible.builtin.get_url:
#     url: "{{ url_coreos_iso_in_artifactory }}"   # https://artifactory.home.local:443/artifactory/generic/pub/openshift-v4/x86_64/dependencies/rhcos/4.16/4.16.3/rhcos-4.16.3-x86_64-live.x86_64.iso
#     dest: "/root/.cache/agent/image_cache/rhcos-416.94.202410211619-0-live.x86_64.iso"   # /root/.cache/agent/image_cache/coreos-x86_64.iso
#     mode: '0644'
#     username: "{{ container_registry_username }}"
#     password: "{{ container_registry_password }}"
#     validate_certs: false


# Execute: openshift-install agent create image
# openshift-install --dir <install_directory> agent create image
# - name: "OPENSHIFT-INSTALL: Create Agent-Based-ISO"
#   ansible.builtin.shell: "{{ base_dir }}downloads/openshift-install --dir={{ base_dir }}sno-clusters/{{ cluster_name }} agent create image"

# Generate Zero-Touch-Provisioning YAML to cluster-dir
# openshift-install agent create cluster-manifests --dir <installation_directory>
- name: "OPENSHIFT-INSTALL: Create Cluster-Manifests-Directory for Zero-Touch-Provisioning"
  ansible.builtin.shell: "{{ base_dir }}downloads/openshift-install --dir={{ base_dir }}sno-clusters/{{ cluster_name }} agent create cluster-manifests"
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ base_dir }}downloads"
    # PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ base_dir }}downloads/openshift-install:{{ base_dir }}downloads/oc"


# ### END THE PLAYBOOK HERE
# - name: Stop the playbook here
#   ansible.builtin.meta: end_play
# ### END THE PLAYBOOK HERE

# INSERT ZTP Yaml-Files to customize the SNO-Installation

- name: "OPENSHIFT-INSTALL: Create Agent-Based-ISO"
  ansible.builtin.shell: "{{ base_dir }}downloads/openshift-install --dir={{ base_dir }}sno-clusters/{{ cluster_name }} agent create image"
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ base_dir }}downloads"
    # PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ base_dir }}downloads/openshift-install:{{ base_dir }}downloads/oc"




# Create the ignition-file 
# - name: "OPENSHIFT-INSTALL: Create single-node-ignition-config"
#   ansible.builtin.shell: "{{ base_dir }}/downloads/openshift-install --dir={{ base_dir }}/sno-clusters/{{ cluster_name }} create single-node-ignition-config"


# Embed the ignition file
# - name: "COREOS-INSTALLER: Embed Ignition file into RHCOS ISO using coreos-installer"
#   ansible.builtin.command: >
#     podman run --privileged --pull always --rm
#     -v /dev:/dev
#     -v /run/udev:/run/udev
#     -v {{ base_dir }}:/data
#     -w /data
#     quay.io/coreos/coreos-installer:release
#     iso ignition embed -fi sno-clusters/{{ cluster_name}}/{{ ignition_file }} downloads/{{ iso_file }} -o downloads/{{ cluster_name }}.iso
#   args:
#     chdir: "{{ cluster_dir }}"



# BEGIN: INSERT BUTANE HOSTNAME and NETWORKCONFIGURATION to {{ base_dir }}/sno-clusters/
# - name: "COREOS-INSTALLER: Embed network-config using iso customize with coreos-installer"
#   ansible.builtin.command: >
#     podman run --privileged --rm -v {{ base_dir }}:/data -w /data quay.io/coreos/coreos-installer:release iso customize -f --dest-device /dev/sda --network-keyfile ./network-configs/{{ cluster_name }}/lan.nmconnection downloads/{{ cluster_name }}-temp.iso -o downloads/{{ cluster_name }}.iso
#   args:
#     chdir: "{{ cluster_dir }}"


# END: INSERT BUTANE HOSTNAME and NETWORKCONFIGURATION to {{ base_dir }}/sno-clusters/

# Download -Zertifate vom vCenter
- name: "BASTION: Download vCenter-Root-Certificates to Bastion-Host"
  ansible.builtin.get_url:
    url: "https://{{ vcenter_hostname }}/certs/download.zip"
    dest: "{{ dir_downloads }}download.zip"
    mode: '0600'
    validate_certs: false
  register: download_result

# Extract Root-Certificates
- name: "BASTION: Extract Root-Certificates to Bastion-Host certs-directory"
  ansible.builtin.unarchive:
    src: "{{ dir_downloads }}download.zip"
    dest: "{{ dir_certs }}"
    remote_src: true
  when: download_result is succeeded

# Copy root-cafile to truststore on Bastion-Host
- name: "BASTION: Copy all vcenter-rootca-certificate-files to the bastions truststore"
  ansible.builtin.copy:
    src: "{{ dir_entpackt }}"
    dest: "/etc/pki/ca-trust/source/anchors/"
    owner: root
    group: root
    mode: '0644'
    remote_src: true

# Refresh the truststore of the Bastion-Host
- name: "BASTION: Refresh Bastion-Host CA-Truststore"
  ansible.builtin.command: update-ca-trust
  changed_when: false

### VMWARE
# Löschen falls vorhanden
- name: "VMWARE: Delete an existing virtual machine, if exists"
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    name: "{{ cluster_name }}"
    delete_from_inventory: true
    state: absent
    force: true
  # delegate_to: localhost

# WICHTIG: Das ISO-File darf nicht mehr in einer VM gemounted sein!!!
- name: "VMWARE: Remove {{ cluster_name}}.iso on a datastore before uploading"
  community.vmware.vsphere_file:
    hostname: '{{ esx_host_hostname }}'
    username: '{{ esx_host_username }}'
    password: '{{ esx_host_password }}'
    datacenter: ha-datacenter
    datastore: local-ssd
    path: sno/{{ cluster_name }}.iso
    state: absent

- name: "VMWARE: Upload customized-sno ISO to VMware datastore via HTTPS"
  ansible.builtin.uri:
    url: "https://{{ esx_host_hostname }}/folder/sno/{{ cluster_name }}.iso?dcPath=ha-datacenter&dsName=local-ssd"
    method: PUT
    user: "{{ esx_host_username }}"
    password: "{{ esx_host_password }}"
    # sno2/agent.x86_64.iso
    src: "{{ cluster_dir }}{{filename_agent_iso}}"
    force_basic_auth: true
    status_code: 201
    remote_src: true

# Erzeuge eine VM für SNO
# !!!disk.EnableUUID=TRUE mit einbauen!!!

- name: "VMWARE: Create the virtual machine for SNO"
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "dc-home"
    folder: /dc-home/vm/openshift/
    name: "{{ cluster_name }}"
    state: powered-off
    guest_id: rhel9_64Guest
    # This is hostname of particular ESXi server on which user wants VM to be deployed
    # esxi_hostname: "{{ esxi_hostname }}"
    # customvalues:
    #   - key: disk.EnableUUID   # add the Advanced Configuration Parameter 
    #     value: TRUE
    disk:
    - size_gb: "{{ disk_size_gb }}"
      type: thin
      datastore: "{{ datastore }}"
    hardware:
      memory_mb: "{{ memory_mb }}"
      num_cpus: "{{ cpu_count }}"
    cdrom:
      - controller_type: sata
        controller_number: 0
        unit_number: 1
        state: present
        type: iso
        iso_path: "[local-ssd] sno/{{ cluster_name }}.iso"
    networks:
    - name: "{{ network_name }}"
      device_type: vmxnet3
      mac: "{{ mac_address }}"
    # wait_for_ip_address: true
    # wait_for_ip_address_timeout: 600
  # delegate_to: localhost
  register: deploy_vm
  # tags:
  #   - customattribut



# Set advanced configuration parameters via GOVC
# disk.EnableUUID=TRUE
- name: "GOVC: Set advanced configuration parameters via GOVC"
  ansible.builtin.shell: "govc vm.change -vm={{ cluster_name }} -e disk.EnableUUID=TRUE"
  environment:
    GOVC_URL: "https://{{ vcenter_hostname }}/sdk"
    GOVC_USERNAME: "{{ vcenter_username }}"
    GOVC_PASSWORD: "{{ vcenter_password }}"
    GOVC_INSECURE: "0"  # Setzt SSL-Zertifikatüberprüfung außer Kraft, falls du selbstsignierte Zertifikate verwendes
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ base_dir }}downloads/"
  tags:
    - customattribut

# Bootreihenfolge festlegen
- name: "VMWARE: Change virtual machine's boot order and related parameters"
  community.vmware.vmware_guest_boot_manager:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    name: "{{ cluster_name }}"
    boot_delay: 2000
    enter_bios_setup: false
    boot_retry_enabled: true
    boot_retry_delay: 22300
    boot_firmware: efi
    secure_boot_enabled: true
    boot_order:
      - disk
      - cdrom
      - ethernet

- name: Set the state of a virtual machine to poweron
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    folder: "/{{ datacenter }}/vm/openshift"
    name: "{{ cluster_name }}"
    state: powered-on

# Zeige den Output für die DNSMASQ-Konfiguration an
- name: "Display DNS configuration reminder in better format"
  debug:
    msg:
      - "Bitte vergiss nicht deinen DNS-Server zu konfigurieren!"
      - "## {{ cluster_name }}"
      - "address=/.apps.{{ cluster_name }}.home.local/{{ ip_address }}"
      - "address=/api-int.{{ cluster_name }}.home.local/{{ ip_address }}"
      - "address=/api.{{ cluster_name }}.home.local/{{ ip_address }}"
      - "dhcp-host={{ deploy_vm.instance.hw_eth0.macaddress }},{{ ip_address }},{{ cluster_name }}"
