# tasks file for agend-based-sno
---
- name: Install required packages
  ansible.builtin.yum:
    name:
      - tar
      - wget
      - jq
      - podman
      - python3
      - python3-pip
    state: present

- name: Stelle sicher, dass pip3 installiert ist
  ansible.builtin.package:
    name: python3-pip
    state: present

- name: Installiere pyVmomi über pip3
  ansible.builtin.pip:
    name: pyvmomi
    state: present
    executable: pip3

- name: Installiere requests über pip3
  ansible.builtin.pip:
    name: requests
    state: present
    executable: pip3

# Everything for a clean installation of the same cluster
- name: Clean Cluster directories for a fresh installation
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ssh_key_dir }}"
    - "{{ cluster_dir }}"

- name: Create base directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0644'
  loop:
    - "{{ base_dir }}"
    - "{{ base_dir }}/ssh-keys"
    - "{{ base_dir }}/sno-clusters"
    - "{{ base_dir }}/downloads"
    - "{{ base_dir }}/certs"
    - "{{ ssh_key_dir }}"
    - "{{ cluster_dir }}"

- name: Create SSH directory if it does not exist
  ansible.builtin.file:
    path: "{{ ssh_key_dir }}"
    state: directory
    mode: '0755'

- name: Generate SSH key if not exists
  ansible.builtin.command:
    cmd: "ssh-keygen -f {{ ssh_key_dir }}/id_rsa_{{ cluster_name }} -N ''"
  args:
    creates: "{{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub"

- name: Download OpenShift installer
  ansible.builtin.get_url:
    url: "{{ openshift_installer_url }}"
    dest: "{{ base_dir }}/downloads/openshift-install.tar.gz"
    mode: '0644'

- name: Check if OpenShift installer is already extracted
  ansible.builtin.stat:
    path: "{{ base_dir }}/downloads/openshift-install"
  register: installer_extracted

- name: Extract OpenShift installer
  ansible.builtin.unarchive:
    src: "{{ base_dir }}/downloads/openshift-install.tar.gz"
    dest: "{{ base_dir }}/downloads/"
    remote_src: true
  when: not installer_extracted.stat.exists

- name: Download OpenShift client (oc CLI)
  ansible.builtin.get_url:
    url: "{{ openshift_client_url }}"
    dest: "{{ base_dir }}/downloads/openshift-client.tar.gz"
    mode: '0644'

- name: Check if OpenShift client is already extracted
  ansible.builtin.stat:
    path: "{{ base_dir }}/downloads/oc"
  register: client_extracted

- name: Extract OpenShift client
  ansible.builtin.unarchive:
    src: "{{ base_dir }}/downloads/openshift-client.tar.gz"
    dest: "{{ base_dir }}/downloads/"
    remote_src: true
  when: not client_extracted.stat.exists

- name: Add OpenShift binaries to PATH
  ansible.builtin.lineinfile:
    path: /etc/profile.d/openshift_path.sh
    line: 'export PATH=$PATH:{{ base_dir }}/downloads:{{ base_dir }}/downloads'
    create: true
    mode: '0644'

- name: Source OpenShift path script
  ansible.builtin.shell: source /etc/profile.d/openshift_path.sh
  args:
    executable: /bin/bash

- name: Check if SSH public key exists on remote server
  ansible.builtin.stat:
    path: "{{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub"
  register: ssh_key_stat

- name: Fail if SSH public key does not exist
  ansible.builtin.fail:
    msg: "The SSH public key {{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub was not found on the remote server."
  when: not ssh_key_stat.stat.exists

- name: Read SSH public key from remote server
  ansible.builtin.slurp:
    src: "{{ ssh_key_dir }}/id_rsa_{{ cluster_name }}.pub"
  register: ssh_key_content
  when: ssh_key_stat.stat.exists

- name: Decode SSH public key content
  ansible.builtin.set_fact:
    ssh_public_key: "{{ ssh_key_content.content | b64decode | trim }}"
  when: ssh_key_stat.stat.exists

# Template install-config.yaml
- name: Create install-config.yaml from template in cluster directory
  ansible.builtin.template:
    src: install-config.yaml.j2
    dest: "{{ cluster_dir }}/install-config.yaml"
    mode: '0644'

# Backup -install-config.yaml
- name: Copy install-config.yaml to shared directory with cluster name
  ansible.builtin.template:
    src: "install-config.yaml.j2"
    dest: "{{ base_dir }}/sno-clusters/install-config-{{ cluster_name }}.yaml"
    mode: '0644'

# Agent-Based.yaml
# - name: Create agent-config.yaml for SNO cluster
#   ansible.builtin.template:
#     src: templates/agent-config.yaml.j2
#     dest: "{{ base_dir }}/sno-clusters/{{ cluster_name }}/agent-config.yaml"
#     mode: '0644'              # Beispiel Clustername, kann variabel gesetzt werden

- name: "Retrieve ISO URL for OpenShift installation"
  ansible.builtin.shell: "{{ base_dir }}/downloads/openshift-install coreos print-stream-json | grep location | grep {{ arch }} | grep iso | cut -d'\"' -f4"
  register: iso_output

- name: Set ISO URL fact
  ansible.builtin.set_fact:
    iso_url: "{{ iso_output.stdout }}"
  when: iso_output.stdout is defined and iso_output.stdout != ""

- name: Download OpenShift ISO
  ansible.builtin.get_url:
    url: "{{ iso_url }}"
    dest: "{{ base_dir }}/downloads/rhcos-live.iso"
    mode: '0644'
  when: iso_url is defined

- name: Create single-node-ignition-config
  ansible.builtin.shell: "{{ base_dir }}/downloads/openshift-install --dir={{ base_dir }}/sno-clusters/{{ cluster_name }} create single-node-ignition-config"

# Remove Output-File if exists
- name: Delete the file /opt/sva/downloads/sno2.iso
  ansible.builtin.file:
    path: "{{ dir_downloads }}{{ cluster_name }}.iso"
    state: absent

# Embed the ignition file
- name: Embed Ignition file into RHCOS ISO using coreos-installer
  ansible.builtin.command: >
    podman run --privileged --pull always --rm
    -v /dev:/dev
    -v /run/udev:/run/udev
    -v {{ base_dir }}:/data
    -w /data
    quay.io/coreos/coreos-installer:release
    iso ignition embed -fi sno-clusters/{{ cluster_name}}/{{ ignition_file }} downloads/{{ iso_file }} -o downloads/{{ cluster_name }}.iso
  args:
    chdir: "{{ cluster_dir }}"

# Download -Zertifate vom vCenter
- name: "VCenter-Zertifikate herunterladen"
  ansible.builtin.get_url:
    url: "https://{{ vcenter_hostname }}/certs/download.zip"
    dest: "{{ dir_downloads }}download.zip"
    mode: '0600'
    validate_certs: false
  register: download_result

# Zertifikate entpacken
- name: Zertifikate entpacken
  ansible.builtin.unarchive:
    src: "{{ dir_downloads }}download.zip"
    dest: "{{ dir_certs }}"
    remote_src: true
  when: download_result is succeeded

# Copy root-cafile to truststore on Bastion-Host
- name: Kopiere alle Dateien aus dem Zertifikatsverzeichnis
  ansible.builtin.copy:
    src: "{{ dir_entpackt }}"
    dest: "/etc/pki/ca-trust/source/anchors/"
    owner: root
    group: root
    mode: '0644'
    remote_src: true

# Aktualisiere den truststore auf dem Bastion-Host
- name: "CA-Trust aktualisieren"
  ansible.builtin.command: update-ca-trust
  changed_when: false

### VMWARE
# Löschen falls vorhanden
- name: Delete a virtual machine
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    name: "{{ cluster_name }}"
    delete_from_inventory: true
    state: absent
    force: true
  # delegate_to: localhost

# WICHTIG: Das ISO-File darf nicht mehr in einer VM gemounted sein!!!
- name: "Remove {{ cluster_name}}.iso on a datastore before uploading"
  community.vmware.vsphere_file:
    hostname: '{{ esx_host_hostname }}'
    username: '{{ esx_host_username }}'
    password: '{{ esx_host_password }}'
    datacenter: ha-datacenter
    datastore: local-ssd
    path: sno/{{ cluster_name }}.iso
    state: absent

- name: Upload ISO to VMware datastore via HTTP
  ansible.builtin.uri:
    url: "https://{{ esx_host_hostname }}/folder/sno/{{ cluster_name }}.iso?dcPath=ha-datacenter&dsName=local-ssd"
    method: PUT
    user: "{{ esx_host_username }}"
    password: "{{ esx_host_password }}"
    src: "{{ dir_downloads }}{{ cluster_name }}.iso"
    force_basic_auth: true
    status_code: 201
    remote_src: true

# Erzeuge ein VM für SNO
- name: Create a virtual machine
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "dc-home"
    folder: /dc-home/vm/openshift/
    name: "{{ cluster_name }}"
    state: powered-off
    guest_id: rhel9_64Guest
    # This is hostname of particular ESXi server on which user wants VM to be deployed
    # esxi_hostname: "{{ esxi_hostname }}"
    disk:
    - size_gb: "{{ disk_size_gb }}"
      type: thin
      datastore: "{{ datastore }}"
    hardware:
      memory_mb: "{{ memory_mb }}"
      num_cpus: "{{ cpu_count }}"
    cdrom:
      - controller_type: sata
        controller_number: 0
        unit_number: 1
        state: present
        type: iso
        iso_path: "[local-ssd] sno/sno2.iso"
    networks:
    - name: pg-home
      device_type: vmxnet3
    # wait_for_ip_address: true
    # wait_for_ip_address_timeout: 600
  # delegate_to: localhost
  register: deploy_vm

# Bootreihenfolge festlegen
- name: Change virtual machine's boot order and related parameters
  community.vmware.vmware_guest_boot_manager:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    name: "{{ cluster_name }}"
    boot_delay: 2000
    enter_bios_setup: false
    boot_retry_enabled: true
    boot_retry_delay: 22300
    boot_firmware: bios
    secure_boot_enabled: false
    boot_order:
      - disk
      - cdrom
      - ethernet
